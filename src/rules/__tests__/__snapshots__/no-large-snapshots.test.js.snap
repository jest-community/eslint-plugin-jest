// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`no-large-snapshots ExpressionStatement function should not report whitelisted large snapshots based on regexp 1`] = `
Array [
  Object {
    "data": Object {
      "lineCount": 58,
      "lineLimit": 50,
    },
    "messageId": "tooLongSnapshots",
    "node": Node {
      "_babelType": "ExpressionStatement",
      "end": 328,
      "expression": Node {
        "_babelType": "AssignmentExpression",
        "end": 327,
        "left": Node {
          "_babelType": "MemberExpression",
          "computed": true,
          "end": 36,
          "loc": SourceLocation {
            "end": Position {
              "column": 36,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "object": Node {
            "_babelType": "Identifier",
            "end": 7,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 1,
              },
              "identifierName": "exports",
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "name": "exports",
            "range": Array [
              0,
              7,
            ],
            "start": 0,
            "type": "Identifier",
          },
          "property": Node {
            "_babelType": "TemplateLiteral",
            "end": 35,
            "expressions": Array [],
            "loc": SourceLocation {
              "end": Position {
                "column": 35,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "quasis": Array [
              Node {
                "_babelType": "TemplateElement",
                "end": 34,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 35,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "range": Array [
                  8,
                  35,
                ],
                "start": 9,
                "tail": true,
                "type": "TemplateElement",
                "value": Object {
                  "cooked": "a big component with text",
                  "raw": "a big component with text",
                },
              },
            ],
            "range": Array [
              8,
              35,
            ],
            "start": 8,
            "type": "TemplateLiteral",
          },
          "range": Array [
            0,
            36,
          ],
          "start": 0,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 59,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "=",
        "range": Array [
          0,
          327,
        ],
        "right": Node {
          "_babelType": "TemplateLiteral",
          "end": 327,
          "expressions": Array [],
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 59,
            },
            "start": Position {
              "column": 39,
              "line": 1,
            },
          },
          "quasis": Array [
            Node {
              "_babelType": "TemplateElement",
              "end": 326,
              "loc": SourceLocation {
                "end": Position {
                  "column": 1,
                  "line": 59,
                },
                "start": Position {
                  "column": 39,
                  "line": 1,
                },
              },
              "range": Array [
                39,
                327,
              ],
              "start": 40,
              "tail": true,
              "type": "TemplateElement",
              "value": Object {
                "cooked": "
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
",
                "raw": "
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
",
              },
            },
          ],
          "range": Array [
            39,
            327,
          ],
          "start": 39,
          "type": "TemplateLiteral",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 59,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "range": Array [
        0,
        328,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  },
]
`;

exports[`no-large-snapshots ExpressionStatement function should report if file is not whitelisted 1`] = `
Array [
  Object {
    "data": Object {
      "lineCount": 58,
      "lineLimit": 50,
    },
    "messageId": "tooLongSnapshots",
    "node": Node {
      "_babelType": "ExpressionStatement",
      "end": 320,
      "expression": Node {
        "_babelType": "AssignmentExpression",
        "end": 319,
        "left": Node {
          "_babelType": "MemberExpression",
          "computed": true,
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "object": Node {
            "_babelType": "Identifier",
            "end": 7,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 1,
              },
              "identifierName": "exports",
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "name": "exports",
            "range": Array [
              0,
              7,
            ],
            "start": 0,
            "type": "Identifier",
          },
          "property": Node {
            "_babelType": "TemplateLiteral",
            "end": 27,
            "expressions": Array [],
            "loc": SourceLocation {
              "end": Position {
                "column": 27,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "quasis": Array [
              Node {
                "_babelType": "TemplateElement",
                "end": 26,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 27,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "range": Array [
                  8,
                  27,
                ],
                "start": 9,
                "tail": true,
                "type": "TemplateElement",
                "value": Object {
                  "cooked": "a big component 1",
                  "raw": "a big component 1",
                },
              },
            ],
            "range": Array [
              8,
              27,
            ],
            "start": 8,
            "type": "TemplateLiteral",
          },
          "range": Array [
            0,
            28,
          ],
          "start": 0,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 59,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "=",
        "range": Array [
          0,
          319,
        ],
        "right": Node {
          "_babelType": "TemplateLiteral",
          "end": 319,
          "expressions": Array [],
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 59,
            },
            "start": Position {
              "column": 31,
              "line": 1,
            },
          },
          "quasis": Array [
            Node {
              "_babelType": "TemplateElement",
              "end": 318,
              "loc": SourceLocation {
                "end": Position {
                  "column": 1,
                  "line": 59,
                },
                "start": Position {
                  "column": 31,
                  "line": 1,
                },
              },
              "range": Array [
                31,
                319,
              ],
              "start": 32,
              "tail": true,
              "type": "TemplateElement",
              "value": Object {
                "cooked": "
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
",
                "raw": "
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
line
",
              },
            },
          ],
          "range": Array [
            31,
            319,
          ],
          "start": 31,
          "type": "TemplateLiteral",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 59,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "range": Array [
        0,
        320,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  },
]
`;

exports[`no-large-snapshots ExpressionStatement function should report if maxSize is zero 1`] = `
Array [
  Object {
    "data": Object {
      "lineCount": 1,
      "lineLimit": 0,
    },
    "messageId": "noSnapshot",
    "node": Object {
      "loc": Object {
        "end": Object {
          "line": 2,
        },
        "start": Object {
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`no-large-snapshots ExpressionStatement function should report if node has more lines of code than number given in sizeThreshold option 1`] = `
Array [
  Object {
    "data": Object {
      "lineCount": 83,
      "lineLimit": 70,
    },
    "messageId": "tooLongSnapshots",
    "node": Object {
      "loc": Object {
        "end": Object {
          "line": 103,
        },
        "start": Object {
          "line": 20,
        },
      },
    },
  },
]
`;

exports[`no-large-snapshots ExpressionStatement function should report if node has more than 50 lines of code and no sizeThreshold option is passed 1`] = `
Array [
  Object {
    "data": Object {
      "lineCount": 52,
      "lineLimit": 50,
    },
    "messageId": "tooLongSnapshots",
    "node": Object {
      "loc": Object {
        "end": Object {
          "line": 53,
        },
        "start": Object {
          "line": 1,
        },
      },
    },
  },
]
`;
